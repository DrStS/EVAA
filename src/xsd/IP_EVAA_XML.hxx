// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef IP_EVAA_XML_HXX
#define IP_EVAA_XML_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class vector_legs_t;
class car_settings_t;
class car;
class initial;
class external;
class simulation;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class vector_legs_t: public ::xml_schema::type
{
  public:
  // rr
  //
  typedef ::xml_schema::double_ rr_type;
  typedef ::xsd::cxx::tree::traits< rr_type, char, ::xsd::cxx::tree::schema_type::double_ > rr_traits;

  const rr_type&
  rr () const;

  rr_type&
  rr ();

  void
  rr (const rr_type& x);

  // rl
  //
  typedef ::xml_schema::double_ rl_type;
  typedef ::xsd::cxx::tree::traits< rl_type, char, ::xsd::cxx::tree::schema_type::double_ > rl_traits;

  const rl_type&
  rl () const;

  rl_type&
  rl ();

  void
  rl (const rl_type& x);

  // fl
  //
  typedef ::xml_schema::double_ fl_type;
  typedef ::xsd::cxx::tree::traits< fl_type, char, ::xsd::cxx::tree::schema_type::double_ > fl_traits;

  const fl_type&
  fl () const;

  fl_type&
  fl ();

  void
  fl (const fl_type& x);

  // fr
  //
  typedef ::xml_schema::double_ fr_type;
  typedef ::xsd::cxx::tree::traits< fr_type, char, ::xsd::cxx::tree::schema_type::double_ > fr_traits;

  const fr_type&
  fr () const;

  fr_type&
  fr ();

  void
  fr (const fr_type& x);

  // Constructors.
  //
  vector_legs_t (const rr_type&,
                 const rl_type&,
                 const fl_type&,
                 const fr_type&);

  vector_legs_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  vector_legs_t (const vector_legs_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual vector_legs_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  vector_legs_t&
  operator= (const vector_legs_t& x);

  virtual 
  ~vector_legs_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< rr_type > rr_;
  ::xsd::cxx::tree::one< rl_type > rl_;
  ::xsd::cxx::tree::one< fl_type > fl_;
  ::xsd::cxx::tree::one< fr_type > fr_;
};

class car_settings_t: public ::xml_schema::type
{
  public:
  // car
  //
  typedef ::car car_type;
  typedef ::xsd::cxx::tree::traits< car_type, char > car_traits;

  const car_type&
  car () const;

  car_type&
  car ();

  void
  car (const car_type& x);

  void
  car (::std::auto_ptr< car_type > p);

  // initial
  //
  typedef ::initial initial_type;
  typedef ::xsd::cxx::tree::traits< initial_type, char > initial_traits;

  const initial_type&
  initial () const;

  initial_type&
  initial ();

  void
  initial (const initial_type& x);

  void
  initial (::std::auto_ptr< initial_type > p);

  // external
  //
  typedef ::external external_type;
  typedef ::xsd::cxx::tree::traits< external_type, char > external_traits;

  const external_type&
  external () const;

  external_type&
  external ();

  void
  external (const external_type& x);

  void
  external (::std::auto_ptr< external_type > p);

  // simulation
  //
  typedef ::simulation simulation_type;
  typedef ::xsd::cxx::tree::traits< simulation_type, char > simulation_traits;

  const simulation_type&
  simulation () const;

  simulation_type&
  simulation ();

  void
  simulation (const simulation_type& x);

  void
  simulation (::std::auto_ptr< simulation_type > p);

  // Constructors.
  //
  car_settings_t (const car_type&,
                  const initial_type&,
                  const external_type&,
                  const simulation_type&);

  car_settings_t (::std::auto_ptr< car_type >,
                  ::std::auto_ptr< initial_type >,
                  ::std::auto_ptr< external_type >,
                  ::std::auto_ptr< simulation_type >);

  car_settings_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  car_settings_t (const car_settings_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual car_settings_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  car_settings_t&
  operator= (const car_settings_t& x);

  virtual 
  ~car_settings_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< car_type > car_;
  ::xsd::cxx::tree::one< initial_type > initial_;
  ::xsd::cxx::tree::one< external_type > external_;
  ::xsd::cxx::tree::one< simulation_type > simulation_;
};

class car: public ::xml_schema::type
{
  public:
  // k_tyre
  //
  typedef ::vector_legs_t k_tyre_type;
  typedef ::xsd::cxx::tree::traits< k_tyre_type, char > k_tyre_traits;

  const k_tyre_type&
  k_tyre () const;

  k_tyre_type&
  k_tyre ();

  void
  k_tyre (const k_tyre_type& x);

  void
  k_tyre (::std::auto_ptr< k_tyre_type > p);

  // k_body
  //
  typedef ::vector_legs_t k_body_type;
  typedef ::xsd::cxx::tree::traits< k_body_type, char > k_body_traits;

  const k_body_type&
  k_body () const;

  k_body_type&
  k_body ();

  void
  k_body (const k_body_type& x);

  void
  k_body (::std::auto_ptr< k_body_type > p);

  // l_lat
  //
  typedef ::vector_legs_t l_lat_type;
  typedef ::xsd::cxx::tree::traits< l_lat_type, char > l_lat_traits;

  const l_lat_type&
  l_lat () const;

  l_lat_type&
  l_lat ();

  void
  l_lat (const l_lat_type& x);

  void
  l_lat (::std::auto_ptr< l_lat_type > p);

  // l_long
  //
  typedef ::vector_legs_t l_long_type;
  typedef ::xsd::cxx::tree::traits< l_long_type, char > l_long_traits;

  const l_long_type&
  l_long () const;

  l_long_type&
  l_long ();

  void
  l_long (const l_long_type& x);

  void
  l_long (::std::auto_ptr< l_long_type > p);

  // mass_wheel
  //
  typedef ::vector_legs_t mass_wheel_type;
  typedef ::xsd::cxx::tree::traits< mass_wheel_type, char > mass_wheel_traits;

  const mass_wheel_type&
  mass_wheel () const;

  mass_wheel_type&
  mass_wheel ();

  void
  mass_wheel (const mass_wheel_type& x);

  void
  mass_wheel (::std::auto_ptr< mass_wheel_type > p);

  // mass_tyre
  //
  typedef ::vector_legs_t mass_tyre_type;
  typedef ::xsd::cxx::tree::traits< mass_tyre_type, char > mass_tyre_traits;

  const mass_tyre_type&
  mass_tyre () const;

  mass_tyre_type&
  mass_tyre ();

  void
  mass_tyre (const mass_tyre_type& x);

  void
  mass_tyre (::std::auto_ptr< mass_tyre_type > p);

  // lower_spring_length
  //
  typedef ::vector_legs_t lower_spring_length_type;
  typedef ::xsd::cxx::tree::traits< lower_spring_length_type, char > lower_spring_length_traits;

  const lower_spring_length_type&
  lower_spring_length () const;

  lower_spring_length_type&
  lower_spring_length ();

  void
  lower_spring_length (const lower_spring_length_type& x);

  void
  lower_spring_length (::std::auto_ptr< lower_spring_length_type > p);

  // upper_spring_length
  //
  typedef ::vector_legs_t upper_spring_length_type;
  typedef ::xsd::cxx::tree::traits< upper_spring_length_type, char > upper_spring_length_traits;

  const upper_spring_length_type&
  upper_spring_length () const;

  upper_spring_length_type&
  upper_spring_length ();

  void
  upper_spring_length (const upper_spring_length_type& x);

  void
  upper_spring_length (::std::auto_ptr< upper_spring_length_type > p);

  // mass_body
  //
  typedef ::xml_schema::double_ mass_body_type;
  typedef ::xsd::cxx::tree::traits< mass_body_type, char, ::xsd::cxx::tree::schema_type::double_ > mass_body_traits;

  const mass_body_type&
  mass_body () const;

  mass_body_type&
  mass_body ();

  void
  mass_body (const mass_body_type& x);

  // I_body_xx
  //
  typedef ::xml_schema::double_ I_body_xx_type;
  typedef ::xsd::cxx::tree::traits< I_body_xx_type, char, ::xsd::cxx::tree::schema_type::double_ > I_body_xx_traits;

  const I_body_xx_type&
  I_body_xx () const;

  I_body_xx_type&
  I_body_xx ();

  void
  I_body_xx (const I_body_xx_type& x);

  // I_body_zz
  //
  typedef ::xml_schema::double_ I_body_zz_type;
  typedef ::xsd::cxx::tree::traits< I_body_zz_type, char, ::xsd::cxx::tree::schema_type::double_ > I_body_zz_traits;

  const I_body_zz_type&
  I_body_zz () const;

  I_body_zz_type&
  I_body_zz ();

  void
  I_body_zz (const I_body_zz_type& x);

  // I_body_xz
  //
  typedef ::xml_schema::double_ I_body_xz_type;
  typedef ::xsd::cxx::tree::traits< I_body_xz_type, char, ::xsd::cxx::tree::schema_type::double_ > I_body_xz_traits;

  const I_body_xz_type&
  I_body_xz () const;

  I_body_xz_type&
  I_body_xz ();

  void
  I_body_xz (const I_body_xz_type& x);

  // I_body_zx
  //
  typedef ::xml_schema::double_ I_body_zx_type;
  typedef ::xsd::cxx::tree::traits< I_body_zx_type, char, ::xsd::cxx::tree::schema_type::double_ > I_body_zx_traits;

  const I_body_zx_type&
  I_body_zx () const;

  I_body_zx_type&
  I_body_zx ();

  void
  I_body_zx (const I_body_zx_type& x);

  // Constructors.
  //
  car (const k_tyre_type&,
       const k_body_type&,
       const l_lat_type&,
       const l_long_type&,
       const mass_wheel_type&,
       const mass_tyre_type&,
       const lower_spring_length_type&,
       const upper_spring_length_type&,
       const mass_body_type&,
       const I_body_xx_type&,
       const I_body_zz_type&,
       const I_body_xz_type&,
       const I_body_zx_type&);

  car (::std::auto_ptr< k_tyre_type >,
       ::std::auto_ptr< k_body_type >,
       ::std::auto_ptr< l_lat_type >,
       ::std::auto_ptr< l_long_type >,
       ::std::auto_ptr< mass_wheel_type >,
       ::std::auto_ptr< mass_tyre_type >,
       ::std::auto_ptr< lower_spring_length_type >,
       ::std::auto_ptr< upper_spring_length_type >,
       const mass_body_type&,
       const I_body_xx_type&,
       const I_body_zz_type&,
       const I_body_xz_type&,
       const I_body_zx_type&);

  car (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  car (const car& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual car*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  car&
  operator= (const car& x);

  virtual 
  ~car ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< k_tyre_type > k_tyre_;
  ::xsd::cxx::tree::one< k_body_type > k_body_;
  ::xsd::cxx::tree::one< l_lat_type > l_lat_;
  ::xsd::cxx::tree::one< l_long_type > l_long_;
  ::xsd::cxx::tree::one< mass_wheel_type > mass_wheel_;
  ::xsd::cxx::tree::one< mass_tyre_type > mass_tyre_;
  ::xsd::cxx::tree::one< lower_spring_length_type > lower_spring_length_;
  ::xsd::cxx::tree::one< upper_spring_length_type > upper_spring_length_;
  ::xsd::cxx::tree::one< mass_body_type > mass_body_;
  ::xsd::cxx::tree::one< I_body_xx_type > I_body_xx_;
  ::xsd::cxx::tree::one< I_body_zz_type > I_body_zz_;
  ::xsd::cxx::tree::one< I_body_xz_type > I_body_xz_;
  ::xsd::cxx::tree::one< I_body_zx_type > I_body_zx_;
};

class initial: public ::xml_schema::type
{
  public:
  // lower_spring_length
  //
  typedef ::vector_legs_t lower_spring_length_type;
  typedef ::xsd::cxx::tree::traits< lower_spring_length_type, char > lower_spring_length_traits;

  const lower_spring_length_type&
  lower_spring_length () const;

  lower_spring_length_type&
  lower_spring_length ();

  void
  lower_spring_length (const lower_spring_length_type& x);

  void
  lower_spring_length (::std::auto_ptr< lower_spring_length_type > p);

  // upper_spring_length
  //
  typedef ::vector_legs_t upper_spring_length_type;
  typedef ::xsd::cxx::tree::traits< upper_spring_length_type, char > upper_spring_length_traits;

  const upper_spring_length_type&
  upper_spring_length () const;

  upper_spring_length_type&
  upper_spring_length ();

  void
  upper_spring_length (const upper_spring_length_type& x);

  void
  upper_spring_length (::std::auto_ptr< upper_spring_length_type > p);

  // vel_tyre
  //
  typedef ::vector_legs_t vel_tyre_type;
  typedef ::xsd::cxx::tree::traits< vel_tyre_type, char > vel_tyre_traits;

  const vel_tyre_type&
  vel_tyre () const;

  vel_tyre_type&
  vel_tyre ();

  void
  vel_tyre (const vel_tyre_type& x);

  void
  vel_tyre (::std::auto_ptr< vel_tyre_type > p);

  // vel_wheel
  //
  typedef ::vector_legs_t vel_wheel_type;
  typedef ::xsd::cxx::tree::traits< vel_wheel_type, char > vel_wheel_traits;

  const vel_wheel_type&
  vel_wheel () const;

  vel_wheel_type&
  vel_wheel ();

  void
  vel_wheel (const vel_wheel_type& x);

  void
  vel_wheel (::std::auto_ptr< vel_wheel_type > p);

  // qi
  //
  typedef ::xml_schema::double_ qi_type;
  typedef ::xsd::cxx::tree::traits< qi_type, char, ::xsd::cxx::tree::schema_type::double_ > qi_traits;

  const qi_type&
  qi () const;

  qi_type&
  qi ();

  void
  qi (const qi_type& x);

  // qj
  //
  typedef ::xml_schema::double_ qj_type;
  typedef ::xsd::cxx::tree::traits< qj_type, char, ::xsd::cxx::tree::schema_type::double_ > qj_traits;

  const qj_type&
  qj () const;

  qj_type&
  qj ();

  void
  qj (const qj_type& x);

  // qk
  //
  typedef ::xml_schema::double_ qk_type;
  typedef ::xsd::cxx::tree::traits< qk_type, char, ::xsd::cxx::tree::schema_type::double_ > qk_traits;

  const qk_type&
  qk () const;

  qk_type&
  qk ();

  void
  qk (const qk_type& x);

  // qr
  //
  typedef ::xml_schema::double_ qr_type;
  typedef ::xsd::cxx::tree::traits< qr_type, char, ::xsd::cxx::tree::schema_type::double_ > qr_traits;

  const qr_type&
  qr () const;

  qr_type&
  qr ();

  void
  qr (const qr_type& x);

  // vel_body
  //
  typedef ::xml_schema::double_ vel_body_type;
  typedef ::xsd::cxx::tree::traits< vel_body_type, char, ::xsd::cxx::tree::schema_type::double_ > vel_body_traits;

  const vel_body_type&
  vel_body () const;

  vel_body_type&
  vel_body ();

  void
  vel_body (const vel_body_type& x);

  // ang_vel_body_x
  //
  typedef ::xml_schema::double_ ang_vel_body_x_type;
  typedef ::xsd::cxx::tree::traits< ang_vel_body_x_type, char, ::xsd::cxx::tree::schema_type::double_ > ang_vel_body_x_traits;

  const ang_vel_body_x_type&
  ang_vel_body_x () const;

  ang_vel_body_x_type&
  ang_vel_body_x ();

  void
  ang_vel_body_x (const ang_vel_body_x_type& x);

  // ang_vel_body_z
  //
  typedef ::xml_schema::double_ ang_vel_body_z_type;
  typedef ::xsd::cxx::tree::traits< ang_vel_body_z_type, char, ::xsd::cxx::tree::schema_type::double_ > ang_vel_body_z_traits;

  const ang_vel_body_z_type&
  ang_vel_body_z () const;

  ang_vel_body_z_type&
  ang_vel_body_z ();

  void
  ang_vel_body_z (const ang_vel_body_z_type& x);

  // Constructors.
  //
  initial (const lower_spring_length_type&,
           const upper_spring_length_type&,
           const vel_tyre_type&,
           const vel_wheel_type&,
           const qi_type&,
           const qj_type&,
           const qk_type&,
           const qr_type&,
           const vel_body_type&,
           const ang_vel_body_x_type&,
           const ang_vel_body_z_type&);

  initial (::std::auto_ptr< lower_spring_length_type >,
           ::std::auto_ptr< upper_spring_length_type >,
           ::std::auto_ptr< vel_tyre_type >,
           ::std::auto_ptr< vel_wheel_type >,
           const qi_type&,
           const qj_type&,
           const qk_type&,
           const qr_type&,
           const vel_body_type&,
           const ang_vel_body_x_type&,
           const ang_vel_body_z_type&);

  initial (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  initial (const initial& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual initial*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  initial&
  operator= (const initial& x);

  virtual 
  ~initial ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< lower_spring_length_type > lower_spring_length_;
  ::xsd::cxx::tree::one< upper_spring_length_type > upper_spring_length_;
  ::xsd::cxx::tree::one< vel_tyre_type > vel_tyre_;
  ::xsd::cxx::tree::one< vel_wheel_type > vel_wheel_;
  ::xsd::cxx::tree::one< qi_type > qi_;
  ::xsd::cxx::tree::one< qj_type > qj_;
  ::xsd::cxx::tree::one< qk_type > qk_;
  ::xsd::cxx::tree::one< qr_type > qr_;
  ::xsd::cxx::tree::one< vel_body_type > vel_body_;
  ::xsd::cxx::tree::one< ang_vel_body_x_type > ang_vel_body_x_;
  ::xsd::cxx::tree::one< ang_vel_body_z_type > ang_vel_body_z_;
};

class external: public ::xml_schema::type
{
  public:
  // boundary_conditions
  //
  typedef ::xml_schema::string boundary_conditions_type;
  typedef ::xsd::cxx::tree::traits< boundary_conditions_type, char > boundary_conditions_traits;

  const boundary_conditions_type&
  boundary_conditions () const;

  boundary_conditions_type&
  boundary_conditions ();

  void
  boundary_conditions (const boundary_conditions_type& x);

  void
  boundary_conditions (::std::auto_ptr< boundary_conditions_type > p);

  // force_body
  //
  typedef ::xml_schema::double_ force_body_type;
  typedef ::xsd::cxx::tree::traits< force_body_type, char, ::xsd::cxx::tree::schema_type::double_ > force_body_traits;

  const force_body_type&
  force_body () const;

  force_body_type&
  force_body ();

  void
  force_body (const force_body_type& x);

  // gravity
  //
  typedef ::xml_schema::double_ gravity_type;
  typedef ::xsd::cxx::tree::traits< gravity_type, char, ::xsd::cxx::tree::schema_type::double_ > gravity_traits;

  const gravity_type&
  gravity () const;

  gravity_type&
  gravity ();

  void
  gravity (const gravity_type& x);

  // Constructors.
  //
  external (const boundary_conditions_type&,
            const force_body_type&,
            const gravity_type&);

  external (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  external (const external& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual external*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  external&
  operator= (const external& x);

  virtual 
  ~external ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< boundary_conditions_type > boundary_conditions_;
  ::xsd::cxx::tree::one< force_body_type > force_body_;
  ::xsd::cxx::tree::one< gravity_type > gravity_;
};

class simulation: public ::xml_schema::type
{
  public:
  // solver
  //
  typedef ::xml_schema::string solver_type;
  typedef ::xsd::cxx::tree::traits< solver_type, char > solver_traits;

  const solver_type&
  solver () const;

  solver_type&
  solver ();

  void
  solver (const solver_type& x);

  void
  solver (::std::auto_ptr< solver_type > p);

  // DOF
  //
  typedef ::xml_schema::int_ DOF_type;
  typedef ::xsd::cxx::tree::traits< DOF_type, char > DOF_traits;

  const DOF_type&
  DOF () const;

  DOF_type&
  DOF ();

  void
  DOF (const DOF_type& x);

  // max_num_iter
  //
  typedef ::xml_schema::int_ max_num_iter_type;
  typedef ::xsd::cxx::tree::traits< max_num_iter_type, char > max_num_iter_traits;

  const max_num_iter_type&
  max_num_iter () const;

  max_num_iter_type&
  max_num_iter ();

  void
  max_num_iter (const max_num_iter_type& x);

  // tolerance
  //
  typedef ::xml_schema::double_ tolerance_type;
  typedef ::xsd::cxx::tree::traits< tolerance_type, char, ::xsd::cxx::tree::schema_type::double_ > tolerance_traits;

  const tolerance_type&
  tolerance () const;

  tolerance_type&
  tolerance ();

  void
  tolerance (const tolerance_type& x);

  // num_time_iter
  //
  typedef ::xml_schema::int_ num_time_iter_type;
  typedef ::xsd::cxx::tree::traits< num_time_iter_type, char > num_time_iter_traits;

  const num_time_iter_type&
  num_time_iter () const;

  num_time_iter_type&
  num_time_iter ();

  void
  num_time_iter (const num_time_iter_type& x);

  // Constructors.
  //
  simulation (const solver_type&,
              const DOF_type&,
              const max_num_iter_type&,
              const tolerance_type&,
              const num_time_iter_type&);

  simulation (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  simulation (const simulation& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual simulation*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  simulation&
  operator= (const simulation& x);

  virtual 
  ~simulation ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< solver_type > solver_;
  ::xsd::cxx::tree::one< DOF_type > DOF_;
  ::xsd::cxx::tree::one< max_num_iter_type > max_num_iter_;
  ::xsd::cxx::tree::one< tolerance_type > tolerance_;
  ::xsd::cxx::tree::one< num_time_iter_type > num_time_iter_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::car_settings_t >
car_settings (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::car_settings_t >
car_settings (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::car_settings_t >
car_settings (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::car_settings_t >
car_settings (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IP_EVAA_XML_HXX
