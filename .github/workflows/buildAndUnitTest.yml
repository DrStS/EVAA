name: Configure, Build, UnitTest and Build Doc

on: push

jobs:
  ## Build and UnitTest
  buildCode:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    strategy:
      matrix:
      #, 'macos-latest'
        os: ['ubuntu-latest', 'windows-latest']
        build: [Debug, Release]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: 'refactoring/codeStripping'
  
    - name: Install Conan Package Manager (Linux & macOS)
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      run: sudo pip install conan --quiet
      shell: bash
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.3
      with:
        cmake-version: '3.18.x'
        
    - name: Check CMake version
      run: cmake --version
      
    - name: Install Conan Package Manager (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: pip install conan --quiet
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.build}} 

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{matrix.build}} 

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build }}
        
  ## Build Doxygen Documentation    
  buildDoxygenDocumentation:
    needs: buildCode
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          ref: 'refactoring/codeStripping'
    - name: Run Doxygen
      uses: mattnotmitt/doxygen-action@v1
      with:
        doxyfile-path: ./doc/Doxyfile
    - name: Run ls
      run : ls -a 
      working-directory: ./doc
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.PERSONAL_TOKEN_EVAA }}
        publish_dir: ./html
        
  ## Build LaTeX Documentation         
  buildLaTeXDocumentation:
    needs: buildDoxygenDocumentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          ref: 'refactoring/codeStripping'
    - name: Add exec bit
      run : chmod +x rundocker.sh
      working-directory: ./doc/LaTeX
    - name: Run LaTeX in Docker
      run: ./rundocker.sh latexmk -pdf -interaction=nonstopmode -halt-on-error EVAADocumentation.tex
      working-directory: ./doc/LaTeX
      shell: bash
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: EVAADocumentation.pdf
        path: ./doc/LaTeX/EVAADocumentation.pdf
        
        
  
  
    

