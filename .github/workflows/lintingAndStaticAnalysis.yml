name: Linting, Static Code Anylsis and Build Doc

on: push

jobs:
  ## Do Linting and Static Code Analysis
  lintingAndStaticAnalysis:
    name: "Do Linting and Static Code Analysis"
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    strategy:
      matrix:
        os: ['ubuntu-latest']
        build: [Release]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: 'refactoring/codeStripping'
  
    - name: Install clang-format and conan
      run: sudo pip install conan clang-format --quiet
      shell: bash
      
    - name: Install clang-tidy
      run: sudo apt-get update -y && sudo apt-get install -y clang-tidy-10
      shell: bash
      
    - name: Install xunit-viewer
      shell: bash
      run: sudo npm i -g xunit-viewer  
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@master
      with:
        cmake-version: '3.18.x'
        
    - name: Check CMake version
      run: cmake --version
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.build}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
   
    - name: Print clang tidy version
      shell: bash
      run: clang-tidy-10 --version

    - name: Print clang format version
      shell: bash
      run: clang-format --version

    - name: Output clang format
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: make clang-format-check VERBOSE=1
      continue-on-error: true
      
    - name: Run clang tidy
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: make clang-tidy VERBOSE=1 > output-clang-tidy.txt
      
    - name: Output clang tidy
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cat output-clang-tidy.txt | python3 ${{runner.workspace}}/EVAA/helperScripts/clang-tidy-to-junit/clang-tidy-to-junit.py ${{runner.workspace}}/build ${{runner.workspace}}/build
      continue-on-error: true     

    - name: Run xunit-viewer
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: xunit-viewer -r . -o ClangTidyReport.html 
      
    - name: Upload jUnit file
      uses: actions/upload-artifact@v2
      with:
        name: Clang Tidy Results
        path: ${{runner.workspace}}/build/**clang-tidy.junit.xml

    - name: Run ls
      run : ls -lt 
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}/doc
      
    - name: Run cat
      run : cat ${{runner.workspace}}/${{github.event.repository.name}}/doc/Doxyfile

    - name: Run Doxygen
      uses: mattnotmitt/doxygen-action@v1
      with:
        doxyfile-path: ./doc/Doxyfile

    - name: Run ls
      run : ls -lt 
      working-directory: ${{runner.workspace}}/${{github.event.repository.name}}/doc
      
    - name: Make dir
      shell: bash
      run:  mkdir ${{runner.workspace}}/${{github.event.repository.name}}/doc/html/ClangTidyReport
      
    - name: Move ClangTidyReport.html
      shell: bash
      run:  mv ${{runner.workspace}}/build/ClangTidyReport.html ${{runner.workspace}}/${{github.event.repository.name}}/doc/html/ClangTidyReport/ClangTidyReport.html      
        
    - name: Upload jUnit report
      uses: actions/upload-artifact@v2
      with:
        name: Clang Tidy Report
        path: ${{runner.workspace}}/${{github.event.repository.name}}/doc/html/ClangTidyReport/ClangTidyReport.html
      
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.PERSONAL_TOKEN_EVAA }}
        publish_dir: ./html

    - name: Deploy report
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.PERSONAL_TOKEN_EVAA }}
        destination_dir: ClangTidyReport
        publish_dir: ${{runner.workspace}}/build/ClangTidyReport 
