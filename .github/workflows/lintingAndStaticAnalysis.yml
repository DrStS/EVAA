name: Linting and Static Code Anylsis

on: push

jobs:
  ## Do Linting and Static Code Analysis
  lintingCode:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    strategy:
      matrix:
        os: ['ubuntu-latest']
        build: [Release]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: 'refactoring/codeStripping'
  
    - name: Install clang-format
      run: sudo pip install clang-format --quiet
      shell: bash
      
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@master
      with:
        cmake-version: '3.18.x'
        
    - name: Check CMake version
      run: cmake --version
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.build}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Clang-Format
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: make clang-format-check VERBOSE=1


